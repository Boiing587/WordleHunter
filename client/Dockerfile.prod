FROM node:18-alpine AS deps
# See https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine for why libc6-compat might be needed
RUN apk add --no-cache libc6-compat
WORKDIR /usr/src/app

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN if test -f yarn.lock; then yarn --frozen-lockfile; \
  elif test -f package-lock.json; then npm ci; \
  elif test -f pnpm-lock.yaml; then yarn global add pnpm && pnpm i; \
  else printf "Lockfile not found.\n" && exit 1; \
  fi


FROM node:18-alpine AS builder
WORKDIR /usr/src/app
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY . .

ENV NEXT_TELEMETRY_DISABLED 1

RUN yarn build

# RUN if test -f yarn.lock; then yarn build; \
#   elif test -f package-lock.json; then npm run build; \
#   elif test -f pnpm-lock.yaml; then pnpm run build; \
#   else printf "Lockfile not found.\n" && exit 1; \
#   fi

RUN npx tailwindcss -o build.css --minify


# Production-image
FROM node:18-alpine AS runner
WORKDIR /usr/src/app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /usr/src/app/next.config.js ./
COPY --from=builder /usr/src/app/public ./public
COPY --from=builder /usr/src/app/package.json ./package.json

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD [ "node", "server.js" ]
